{"version":3,"sources":["components/MemoItem.tsx","components/CreateButton.tsx","atoms/notepad.ts","components/MemoApp.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MemoItem","id","value","changeHandler","onChange","placeholder","CreateButton","clickHandler","onClick","notePadAtom","atom","key","default","MemoApp","setNotepad","useSetRecoilState","useRecoilState","memos","handleCreate","useCallback","state","String","length","sort","a","b","localeCompare","handleChange","event","filteredMemos","filter","memo","currentTarget","newMemos","target","map","className","App","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAOaA,EAA4B,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,GAAIC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,cACrD,OACE,0BACEF,GAAIA,EACJC,MAAOA,EACPE,SAAUD,EACVE,YAAY,wECLLC,EAAgC,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAC9C,OAAO,wBAAQC,QAASD,EAAjB,uCCPIE,EAAcC,YAAK,CAC9BC,IAAK,iBACLC,QAAS,CACP,CACEX,GAAI,IACJC,MAAO,wBCDAW,EAAoB,WAE/B,IAAMC,EAAaC,YAAkBN,GAFA,EAIrBO,YAAeP,GAAxBQ,EAJ8B,oBAS/BC,EAAeC,uBAAY,WAC/BL,GAAW,SAACM,GAAD,MACT,sBAAIA,GAAJ,CAAW,CAAEnB,GAAIoB,OAAOD,EAAME,OAAS,GAAIpB,MAAO,MAAMqB,MAAK,SAACC,EAAGC,GAAJ,OAC3DD,EAAEvB,GAAGyB,cAAcD,EAAExB,YAGxB,CAACa,IAKEa,EAAeR,uBACnB,SAACS,GACC,IAAMC,EAAgBZ,EAAMa,QAC1B,SAACC,GAAD,OAAUA,EAAK9B,KAAO2B,EAAMI,cAAc/B,MAEtCgC,EAAW,sBACZJ,GADY,CAEf,CACE5B,GAAIoB,OAAOO,EAAMI,cAAc/B,IAC/BC,MAAO0B,EAAMM,OAAOhC,SAEtBqB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEvB,GAAGyB,cAAcD,EAAExB,OACtCa,GAAW,kBAAMmB,OAEnB,CAAChB,EAAOH,IAEV,OACE,qCACGG,EAAMkB,KAAI,SAACJ,GAAD,OACT,cAAC,EAAD,CAEE9B,GAAI8B,EAAK9B,GACTC,MAAO6B,EAAK7B,MACZC,cAAewB,GAHVI,EAAK9B,OAMd,qBAAKmC,UAAU,cAAf,SACE,cAAC,EAAD,CAAc7B,aAAcW,UCnCrBmB,EAbI,WAEjB,OADAC,QAAQC,IAAI,kCAEV,sBAAKH,UAAU,MAAf,UACE,6CAEA,cAAC,IAAD,UACE,cAAC,EAAD,UCEOI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.50e87256.chunk.js","sourcesContent":["import React from \"react\";\n\ntype Props = {\n  id: string;\n  value: string;\n  changeHandler: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n};\nexport const MemoItem: React.FC<Props> = ({ id, value, changeHandler }) => {\n  return (\n    <textarea\n      id={id}\n      value={value}\n      onChange={changeHandler}\n      placeholder=\"メモを入力しましょう！\"\n    />\n  );\n};\n","// import React, { useState, useCallback } from \"react\";\n// import { useRecoilState } from \"recoil\";\nimport React from \"react\";\n\ntype Props = {\n  clickHandler: () => void;\n};\n\nexport const CreateButton: React.FC<Props> = ({ clickHandler }) => {\n  return <button onClick={clickHandler}>新規作成</button>;\n};\n","import { atom } from \"recoil\";\n\nexport const notePadAtom = atom({\n  key: \"create_notepad\",\n  default: [\n    {\n      id: \"1\",\n      value: \"Please Type this.\",\n    },\n  ],\n});\n","import React, { useCallback } from \"react\";\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\nimport { MemoItem } from \"./MemoItem\";\nimport { CreateButton } from \"./CreateButton\";\nimport { notePadAtom } from \"../atoms/notepad\";\n\nexport const MemoApp: React.FC = () => {\n  // Recoilの Atoms を呼び出して定義\n  const setNotepad = useSetRecoilState(notePadAtom);\n  // ステートとして利用する\n  const [memos] = useRecoilState(notePadAtom);\n\n  /**\n   * メモ帳を新しく作成するコールバックです。\n   */\n  const handleCreate = useCallback(() => {\n    setNotepad((state) =>\n      [...state, { id: String(state.length + 1), value: \"\" }].sort((a, b) =>\n        a.id.localeCompare(b.id)\n      )\n    );\n  }, [setNotepad]);\n\n  /**\n   * メモ帳のインプットを更新するコールバックです。\n   */\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n      const filteredMemos = memos.filter(\n        (memo) => memo.id !== event.currentTarget.id\n      );\n      const newMemos = [\n        ...filteredMemos,\n        {\n          id: String(event.currentTarget.id),\n          value: event.target.value,\n        },\n      ].sort((a, b) => a.id.localeCompare(b.id));\n      setNotepad(() => newMemos);\n    },\n    [memos, setNotepad]\n  );\n  return (\n    <>\n      {memos.map((memo) => (\n        <MemoItem\n          key={memo.id}\n          id={memo.id}\n          value={memo.value}\n          changeHandler={handleChange}\n        />\n      ))}\n      <div className=\"button_area\">\n        <CreateButton clickHandler={handleCreate} />\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { RecoilRoot } from \"recoil\";\nimport { MemoApp } from \"./components/MemoApp\";\n\nexport const App = () => {\n  console.log(\"ComponentWithRecoil is updated\");\n  return (\n    <div className=\"App\">\n      <h1>NotePad App</h1>\n      {/* Recoilのコンポーネントで囲う */}\n      <RecoilRoot>\n        <MemoApp />\n      </RecoilRoot>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}